import streamlit as st
import os
import json
import pandas as pd
import io
from fatura_analiz_motoru import FaturaAnalizMotoru

# GeÃ§ici dosyalarÄ±n kaydedileceÄŸi klasÃ¶r
UPLOAD_DIR = "temp_uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

st.set_page_config(layout="wide", page_title="AkÄ±llÄ± Fatura TanÄ±ma Sistemi")

def display_results(results: dict, source_path: str | None = None):
    """Analiz sonuÃ§larÄ±nÄ± Streamlit arayÃ¼zÃ¼nde gÃ¶sterir."""
    
    st.subheader("Ã‡Ä±karÄ±lan YapÄ±landÄ±rÄ±lmÄ±ÅŸ Veri")
    
    yapilandirilmis_veri = results.get("yapilandirilmis_veri", {})
    
    if not yapilandirilmis_veri:
        st.warning("Bu dosyadan yapÄ±landÄ±rÄ±lmÄ±ÅŸ veri Ã§Ä±karÄ±lamadÄ±.")
        return

    # Ã–nemli alanlarÄ± ve diÄŸerlerini ayÄ±r
    onemli_alanlar = [
        'fatura_no', 'fatura_tarihi', 'satici_unvan', 'alici_unvan', 
        'odenecek_tutar', 'mal_hizmet_toplam_tutari', 'ettn'
    ]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.info("ğŸ”¹ Temel Fatura Bilgileri")
        for alan in onemli_alanlar:
            deger = yapilandirilmis_veri.get(alan)
            if deger:
                st.metric(label=alan.replace('_', ' ').title(), value=str(deger))

    with col2:
        st.info("ğŸ”¸ DiÄŸer Detaylar")
        diger_veriler = {k: v for k, v in yapilandirilmis_veri.items() if k not in onemli_alanlar and k != 'urun_kalemleri'}
        if diger_veriler:
            st.json(diger_veriler)
        else:
            st.write("DiÄŸer detaylar bulunamadÄ±.")

    st.divider()

    # ÃœrÃ¼n kalemlerini gÃ¶ster
    st.subheader("ÃœrÃ¼n/Hizmet Kalemleri")
    urun_kalemleri = yapilandirilmis_veri.get("urun_kalemleri", [])
    if urun_kalemleri:
        try:
            df = pd.DataFrame(urun_kalemleri)
            st.dataframe(df, use_container_width=True)
        except Exception as e:
            st.error(f"ÃœrÃ¼n kalemleri tablo olarak gÃ¶sterilirken bir hata oluÅŸtu: {e}")
            st.json(urun_kalemleri)
    else:
        st.warning("Dosyadan Ã¼rÃ¼n/hizmet kalemi Ã§Ä±karÄ±lamadÄ±.")

    # Debug gÃ¶rselini (varsa) gÃ¶ster
    with st.expander("Debug GÃ¶rselini GÃ¶ster (BÃ¶lge Ä°ÅŸaretleri)"):
        debug_img_path = None
        try:
            if source_path:
                base = os.path.splitext(os.path.basename(source_path))[0]
                candidate = os.path.join("test_reports", "debug_images", f"debug_{base}.png")
                if os.path.exists(candidate):
                    debug_img_path = candidate
        except Exception:
            debug_img_path = None
        if debug_img_path:
            st.image(debug_img_path, caption=os.path.basename(debug_img_path), use_column_width=True)
        else:
            st.write("Debug gÃ¶rseli bulunamadÄ±.")

    # Ham metni geniÅŸletilebilir bir alanda gÃ¶ster
    with st.expander("OCR'dan Ã‡Ä±karÄ±lan Ham Metni GÃ¶r"):
        st.text_area("Ham Metin", results.get("ham_metin", "Ham metin bulunamadÄ±."), height=300)

    st.divider()

    # Verileri dÃ¼zenleme ve indirme
    st.subheader("Verileri DÃ¼zelt ve Ä°ndir")
    duzenlenmis = {}
    if yapilandirilmis_veri:
        editable_fields = {k: v for k, v in yapilandirilmis_veri.items() if k != 'urun_kalemleri'}
        cols = st.columns(2)
        items = list(editable_fields.items())
        for idx, (k, v) in enumerate(items):
            with cols[idx % 2]:
                duzenlenmis[k] = st.text_input(k.replace('_', ' ').title(), value=str(v))
        # Kalemleri aynen taÅŸÄ±
        if 'urun_kalemleri' in yapilandirilmis_veri:
            duzenlenmis['urun_kalemleri'] = yapilandirilmis_veri['urun_kalemleri']
    else:
        st.info("DÃ¼zenlenecek veri bulunamadÄ±.")

    if duzenlenmis:
        json_bytes = json.dumps(duzenlenmis, ensure_ascii=False, indent=2).encode('utf-8')
        st.download_button("DÃ¼zeltilmiÅŸ JSON'u Ä°ndir", data=json_bytes, file_name="duzeltilmis_sonuc.json", mime="application/json")

        try:
            flat = {k: v for k, v in duzenlenmis.items() if k != 'urun_kalemleri'}
            buf = io.StringIO()
            pd.DataFrame([flat]).to_csv(buf, index=False)
            st.download_button("DÃ¼zeltilmiÅŸ CSV'yi Ä°ndir", data=buf.getvalue(), file_name="duzeltilmis_sonuc.csv", mime="text/csv")
        except Exception as e:
            st.warning(f"CSV Ã§Ä±ktÄ±sÄ± oluÅŸturulurken hata: {e}")

def main():
    """Streamlit uygulamasÄ±nÄ±n ana fonksiyonu."""
    st.title("ğŸ“„ AkÄ±llÄ± Fatura TanÄ±ma UygulamasÄ±")
    st.markdown("""
        Bu uygulama, yÃ¼klediÄŸiniz fatura gÃ¶rsellerini veya PDF'lerini analiz ederek
        iÃ§erisindeki yapÄ±landÄ±rÄ±lmÄ±ÅŸ verileri (Fatura No, Tarih, Tutar, SatÄ±cÄ±, AlÄ±cÄ± vb.)
        otomatik olarak Ã§Ä±karÄ±r.
    """)

    uploaded_file = st.file_uploader(
        "Analiz etmek iÃ§in bir fatura dosyasÄ± seÃ§in (PDF, PNG, JPG)",
        type=["pdf", "png", "jpg", "jpeg"]
    )

    if uploaded_file is not None:
        # DosyayÄ± geÃ§ici olarak kaydet
        temp_path = os.path.join(UPLOAD_DIR, uploaded_file.name)
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        st.success(f"'{uploaded_file.name}' dosyasÄ± baÅŸarÄ±yla yÃ¼klendi.")
        
        if st.button("FaturayÄ± Analiz Et", type="primary"):
            with st.spinner("Fatura analiz ediliyor... Bu iÅŸlem biraz zaman alabilir."):
                try:
                    # Tesseract yolunu config'den oku
                    tesseract_path = None
                    try:
                        with open('config.json', 'r', encoding='utf-8') as f:
                            config = json.load(f)
                        tesseract_path = config.get('tesseract_cmd_path')
                    except FileNotFoundError:
                        st.warning("config.json bulunamadÄ±, varsayÄ±lan Tesseract yolu kullanÄ±lacak.")

                    # Analiz motorunu baÅŸlat ve Ã§alÄ±ÅŸtÄ±r
                    analiz_motoru = FaturaAnalizMotoru(tesseract_cmd_path=tesseract_path)
                    results = analiz_motoru.analiz_et(temp_path)
                    
                    st.divider()
                    display_results(results, source_path=temp_path)

                except Exception as e:
                    st.error(f"Analiz sÄ±rasÄ±nda beklenmedik bir hata oluÅŸtu: {e}")
                finally:
                    # GeÃ§ici dosyayÄ± sil
                    if os.path.exists(temp_path):
                        os.remove(temp_path)

if __name__ == "__main__":
    main()
